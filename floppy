#!/usr/bin/env python3
# Imports initiaux
import RPi.GPIO as GPIO  # Programme qui controle la position de la plaquette de lecture des lecteurs de disquettes lorsqu'ils jouent de la musique En théorie, pour les musiques de moins de 40 000 Hz /!\ à l'échantillonnage!
import time
import os
import math
import click
from threading import Thread
import mido
GPIO.setwarnings(False)

# Structure des branchements
# liste des couples, channel(quel est le channel joué sur ce floppy), pindir, pinstep pour tous les floppy connectés
floppypin = [(0, 12, 16)]
floppylist=[]
port = None
# Définition du thread floppy. Fait une note lorsque self.playnote = True


class floppy(Thread):
    def __init__(self, pindir, pinstep, transpose=36):
        Thread.__init__(self)
        # Allumage des GPIO demandés
        try:
            GPIO.setmode(GPIO.BOARD)
            # Le pin pindir est connecté à la broche 18 du floppy, /DIR
            GPIO.setup(pindir, GPIO.OUT, initial=GPIO.LOW)
            # Le pin pinstep est connecté à la broche 20 du floppy, /STEP
            GPIO.setup(pinstep, GPIO.OUT, initial=GPIO.LOW)
        except RuntimeError:
            print(
                "Il est mort, Jim! Problème de connection aux GPIOs. Réessayez avec sudo ")
        # Calibrage du lecteur:
        for _ in range(90):
            GPIO.output(pinstep, GPIO.HIGH)
            time.sleep(.0)
            GPIO.output(pinstep, GPIO.LOW)
            time.sleep(.01)
        GPIO.output(pindir, GPIO.HIGH)
        self.pindir = pindir
        self.pinstep = pinstep
        self._play = False
        self._kill = False
        self.note = 35
        self.period = 0.005
        self.transpose = transpose

    def stop(self):
        self._kill=True

    def startNote(self, note):
        self._play = True
        self.period = 1 / (32.7 * 2**((note - self.transpose) / 12))
        self.note = note

    def stopNote(self):
        self._play = False

    def run(self):
        while not self._kill:
            t = time.time()
            if self._play:
                GPIO.output(self.pinstep, GPIO.HIGH)
                time.sleep(.00)
                GPIO.output(self.pinstep, GPIO.LOW)
                GPIO.output(self.pindir, not GPIO.input(self.pindir))
            pause_needed = self.period - (time.time() - t)
            if pause_needed < 0:
                print('You play too high!')
            else:
                time.sleep(pause_needed)  # arret entre un top et un autre


@click.command()
@click.argument('input', default="")
@click.option("--transpose", default=36)
def run(input, transpose):
    global floppylist
    global port

    if input="":
        print('The input is empty. Please enter either a MIDI file or a MIDI port')
        print('The available midi ports are:')
        for portname in mido.get_input_names():
            print('\t', "'" + portname + "'")
        return

    print("[Opening the input]")
    if input.endswith('.mid'):
        port = midifiles.MidiFile(input)
    else:
        port = mido.open_input(input)

    # Allumage et calibration des lecteurs
    print("[Initialisation des lecteurs]")
    for _, pindir, pinstep in floppypin:
        floppylist.append(floppy(pindir, pinstep, transpose))
        floppylist[-1].start()

    # Mainloop
    print("[Marche]")
    for event in inport:
        if not event.type in ('note_on', 'note_off'):
            continue
        print(event)
        time.sleep(event.time)
        nofloppy = [p[0] for p in floppypin].index(event.channel)
        f = floppylist[nofloppy]
        if event.velocity==0 and f.note==event.note:
            f.stopNote()
        elif event.velocity>0:
            f.startNote(event.note)
    kill()


def kill():
    global floppylist
    global port

    if port is not None:
        port.close()
    for f in floppylist:
        f.stop()
        f.join()
    print("[Terminé]")


if __name__ == "__main__":
    try:
        run(standalone_mode=False)
    except click.exceptions.Abort:
        kill()
